"use strict";

var _waitForDomChange = require("../wait-for-dom-change");

var _testUtils = require("./helpers/test-utils");

afterEach(_testUtils.cleanup);
test('waits for the dom to change in the document', async () => {
  const {
    container
  } = (0, _testUtils.renderIntoDocument)('<div />');
  const promise = (0, _waitForDomChange.waitForDomChange)();
  setTimeout(() => container.firstChild.setAttribute('id', 'foo'));
  const mutationResult = await promise;
  expect(mutationResult).toMatchInlineSnapshot(`
Array [
  Object {
    "addedNodes": Array [],
    "attributeName": "id",
    "attributeNamespace": null,
    "nextSibling": null,
    "oldValue": null,
    "previousSibling": null,
    "removedNodes": Array [],
    "target": <div
      id="foo"
    />,
    "type": "attributes",
  },
]
`);
});
test('waits for the dom to change in a specified container', async () => {
  const {
    container
  } = (0, _testUtils.renderIntoDocument)('<div />');
  const promise = (0, _waitForDomChange.waitForDomChange)({
    container
  });
  setTimeout(() => container.firstChild.setAttribute('id', 'foo'));
  const mutationResult = await promise;
  expect(mutationResult).toMatchInlineSnapshot(`
Array [
  Object {
    "addedNodes": Array [],
    "attributeName": "id",
    "attributeNamespace": null,
    "nextSibling": null,
    "oldValue": null,
    "previousSibling": null,
    "removedNodes": Array [],
    "target": <div
      id="foo"
    />,
    "type": "attributes",
  },
]
`);
});
test('can time out', async () => {
  jest.useFakeTimers();
  const promise = (0, _waitForDomChange.waitForDomChange)();
  jest.advanceTimersByTime(4600);
  await expect(promise).rejects.toThrow(/timed out/i);
  jest.useRealTimers();
});
test('can specify our own timeout time', async () => {
  jest.useFakeTimers();
  const promise = (0, _waitForDomChange.waitForDomChange)({
    timeout: 4700
  });
  const handler = jest.fn();
  promise.then(handler, handler); // advance beyond the default

  jest.advanceTimersByTime(4600); // promise was neither rejected nor resolved

  expect(handler).toHaveBeenCalledTimes(0); // advance beyond our specified timeout

  jest.advanceTimersByTime(150); // timed out

  await expect(promise).rejects.toThrow(/timed out/i);
  jest.useRealTimers();
});